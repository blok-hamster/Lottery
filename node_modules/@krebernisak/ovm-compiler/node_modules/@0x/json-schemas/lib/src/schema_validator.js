"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsonschema_1 = require("jsonschema");
const values = require("lodash.values");
const schemas_1 = require("./schemas");
/**
 * A validator for [JSON-schemas](http://json-schema.org/)
 */
class SchemaValidator {
    static _assertSchemaDefined(schema) {
        if (schema === undefined) {
            throw new Error(`Cannot add undefined schema`);
        }
    }
    /**
     * Instantiates a SchemaValidator instance
     */
    constructor() {
        this._validator = new jsonschema_1.Validator();
        for (const schema of values(schemas_1.schemas)) {
            SchemaValidator._assertSchemaDefined(schema);
            this._validator.addSchema(schema, schema.id);
        }
    }
    /**
     * Add a schema to the validator. All schemas and sub-schemas must be added to
     * the validator before the `validate` and `isValid` methods can be called with
     * instances of that schema.
     * @param schema The schema to add
     */
    addSchema(schema) {
        SchemaValidator._assertSchemaDefined(schema);
        this._validator.addSchema(schema, schema.id);
    }
    // In order to validate a complex JS object using jsonschema, we must replace any complex
    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other
    // complex types implement the `toString` method, we can stringify the object and
    // then parse it. The resultant object can then be checked using jsonschema.
    /**
     * Validate the JS object conforms to a specific JSON schema
     * @param instance JS object in question
     * @param schema Schema to check against
     * @returns The results of the validation
     */
    validate(instance, schema) {
        SchemaValidator._assertSchemaDefined(schema);
        const jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));
        return this._validator.validate(jsonSchemaCompatibleObject, schema);
    }
    /**
     * Check whether an instance properly adheres to a JSON schema
     * @param instance JS object in question
     * @param schema Schema to check against
     * @returns Whether or not the instance adheres to the schema
     */
    isValid(instance, schema) {
        const isValid = this.validate(instance, schema).errors.length === 0;
        return isValid;
    }
}
exports.SchemaValidator = SchemaValidator;
//# sourceMappingURL=schema_validator.js.map