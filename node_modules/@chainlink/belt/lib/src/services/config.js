"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const shelljs_1 = require("shelljs");
const utils_1 = require("./utils");
/**
 * Load a validated configuration file in JSON format for app configuration purposes.
 *
 * @param path The path relative to the current working directory to load the configuration file from.
 */
function load(path) {
    let json;
    try {
        json = utils_1.getJsonFile(path);
    }
    catch (e) {
        throw Error(`Could not load config at "${path}".\n\n${e}`);
    }
    assertAppConfig(json);
    return json;
}
exports.load = load;
function assertAppConfig(json) {
    function assertStr(val, prop) {
        if (typeof val !== 'string') {
            throw Error(`Expected value of config.${prop} to be a string\nGot: ${val}`);
        }
    }
    function assertDir(val, prop) {
        assertStr(val, prop);
        if (!shelljs_1.test('-d', val)) {
            throw Error(`Expected value of config.${prop} to be a directory\nGot: ${val}`);
        }
    }
    function assertBool(val, prop) {
        if (typeof val !== 'boolean') {
            throw Error(`Expected value of config.${prop} to be a boolean\nGot: ${val}`);
        }
    }
    function assertCompilerSettings(val) {
        if (!val || typeof val !== 'object') {
            throw Error(`Expected value of config.compilerSettings to be an object\nGot:${val}`);
        }
        const compilerSettings = val;
        if (!compilerSettings.versions ||
            typeof compilerSettings.versions !== 'object') {
            throw Error(`Expected value of config.compilerSettings.versions to be a dictionary\nGot:${JSON.stringify(compilerSettings.versions)}`);
        }
    }
    const appConfig = json;
    assertDir(appConfig.contractsDir, 'contractsDir');
    assertStr(appConfig.artifactsDir, 'artifactsDir');
    assertStr(appConfig.contractAbstractionDir, 'contractAbstractionDir');
    assertBool(appConfig.useDockerisedSolc, 'useDockerisedSolc');
    assertCompilerSettings(appConfig.compilerSettings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBOEI7QUFDOUIsbUNBQXFDO0FBc0VyQzs7OztHQUlHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLElBQVk7SUFDL0IsSUFBSSxJQUFhLENBQUE7SUFDakIsSUFBSTtRQUNGLElBQUksR0FBRyxtQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLEtBQUssQ0FBQyw2QkFBNkIsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUE7S0FDM0Q7SUFDRCxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckIsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBVkQsb0JBVUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUFhO0lBQ3BDLFNBQVMsU0FBUyxDQUFDLEdBQVksRUFBRSxJQUFZO1FBQzNDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sS0FBSyxDQUNULDRCQUE0QixJQUFJLHlCQUF5QixHQUFHLEVBQUUsQ0FDL0QsQ0FBQTtTQUNGO0lBQ0gsQ0FBQztJQUVELFNBQVMsU0FBUyxDQUFDLEdBQVksRUFBRSxJQUFZO1FBQzNDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDcEIsSUFBSSxDQUFDLGNBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxLQUFLLENBQ1QsNEJBQTRCLElBQUksNEJBQTRCLEdBQUcsRUFBRSxDQUNsRSxDQUFBO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUMsR0FBWSxFQUFFLElBQVk7UUFDNUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDNUIsTUFBTSxLQUFLLENBQ1QsNEJBQTRCLElBQUksMEJBQTBCLEdBQUcsRUFBRSxDQUNoRSxDQUFBO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsU0FBUyxzQkFBc0IsQ0FDN0IsR0FBWTtRQUVaLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ25DLE1BQU0sS0FBSyxDQUNULGtFQUFrRSxHQUFHLEVBQUUsQ0FDeEUsQ0FBQTtTQUNGO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxHQUEyQyxDQUFBO1FBQ3BFLElBQ0UsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRO1lBQzFCLE9BQU8sZ0JBQWdCLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFDN0M7WUFDQSxNQUFNLEtBQUssQ0FDVCw4RUFBOEUsSUFBSSxDQUFDLFNBQVMsQ0FDMUYsZ0JBQWdCLENBQUMsUUFBUSxDQUMxQixFQUFFLENBQ0osQ0FBQTtTQUNGO0lBQ0gsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLElBQXdCLENBQUE7SUFDMUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFDakQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFDakQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFBO0lBQ3JFLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtJQUM1RCxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdCB9IGZyb20gJ3NoZWxsanMnXG5pbXBvcnQgeyBnZXRKc29uRmlsZSB9IGZyb20gJy4vdXRpbHMnXG5cbi8qKlxuICogUnVkaW1lbnRhcnkgdHlwZSBoZWxwZXIgdG8gcmVjdXJzaXZlbHkgbWFyayBzdHJpbmcgfCBib29sZWFuIHZhbHVlcyBhcyB1bmtub3duLlxuICpcbiAqIE1hZGUgc3BlY2lmaWNhbGx5IGZvciB2YWxpZGF0aW9uIG9mIEFwcENvbmZpZ1xuICovXG50eXBlIERlZXBVbmtub3duPFQ+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogVFtLXSBleHRlbmRzIHN0cmluZyB8IGJvb2xlYW4gPyB1bmtub3duIDogRGVlcFVua25vd248VFtLXT5cbn1cblxuLyoqXG4gKiBTdHJ1Y3R1cmUgb2YgdGhlIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24sIHBhdGhzIGFyZSByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cbiAqXG4gKiBVc2VzIHRoZXNlIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGZvcjpcbiAqIC0gc29sLWNvbXBpbGVyXG4gKiAtIGNvZGVnZW5uaW5nIGV0aGVycyBjb250cmFjdCBhYnN0cmFjdGlvbnNcbiAqIC0gY29kZWdlbm5pbmcgdHJ1ZmZsZSBjb250cmFjdCBhYnN0cmFjdGlvbnNcbiAqIC0gcnVubmluZyBzb2xoaW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwIHtcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rvcnkgd2hlcmUgYWxsIG9mIHRoZSBzb2xpZGl0eSBzbWFydCBjb250cmFjdHMgYXJlIGhlbGRcbiAgICovXG4gIGNvbnRyYWN0c0Rpcjogc3RyaW5nXG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0b3J5IHdoZXJlIGFsbCBvZiB0aGUgc21hcnQgY29udHJhY3QgYXJ0aWZhY3RzIHNob3VsZCBiZSBvdXRwdXR0ZWRcbiAgICovXG4gIGFydGlmYWN0c0Rpcjogc3RyaW5nXG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0b3J5IHdoZXJlIGFsbCBjb250cmFjdCBhYnN0cmFjdGlvbnMgc2hvdWxkIGJlIG91dHB1dHRlZFxuICAgKi9cbiAgY29udHJhY3RBYnN0cmFjdGlvbkRpcjogc3RyaW5nXG4gIC8qKlxuICAgKiBJbnN0cnVjdCBzb2wtY29tcGlsZXIgdG8gdXNlIGEgZG9ja2VyaXplZCBzb2xjIGluc3RhbmNlIGZvciBoaWdoZXIgcGVyZm9ybWFuY2UsXG4gICAqIG9yIHRvIHVzZSBzb2xjanNcbiAgICovXG4gIHVzZURvY2tlcmlzZWRTb2xjOiBib29sZWFuXG4gIC8qKlxuICAgKiBWYXJpb3VzIGNvbXBpbGVyIHNldHRpbmdzIGZvciBzb2wtY29tcGlsZXJcbiAgICovXG4gIGNvbXBpbGVyU2V0dGluZ3M6IHtcbiAgICAvKipcbiAgICAgKiBBIG1hcHBpbmcgb2YgZGlyZWN0b3JpZXMgdG8gdGhlaXIgc29saWRpdHkgY29tcGlsZXIgdmVyc2lvbnMgdGhhdCBzaG91bGQgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqIGUuZy5cbiAgICAgKiAgR2l2ZW4gdGhlIGZvbGxvd2luZyBkaXJlY3Rvcnkgc3RydWN0dXJlOlxuICAgICAqIGBgYHNoXG4gICAgICogIHNyY1xuICAgICAqICDilJzilIDilIAgdjAuNFxuICAgICAqICDilJTilIDilIAgdjAuNVxuICAgICAqICBgYGBcbiAgICAgKiBPdXIgdmVyc2lvbnMgZGljdCB3b3VsZCBsb29rIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAgICAgKiBgYGBqc29uXG4gICAgICoge1xuICAgICAqICBcInYwLjRcIjogXCIwLjQuMjRcIixcbiAgICAgKiAgXCJ2MC41XCI6IFwiMC41LjBcIlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB2ZXJzaW9uczoge1xuICAgICAgW2Rpcjogc3RyaW5nXTogc3RyaW5nXG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBWZXJzaW9ucyB0byBwdWJsaWNhbGx5IHNob3cgaW4gb3VyIHRydWZmbGUgYm94IG9wdGlvbnNcbiAgICovXG4gIHB1YmxpY1ZlcnNpb25zOiBzdHJpbmdbXVxufVxuXG4vKipcbiAqIExvYWQgYSB2YWxpZGF0ZWQgY29uZmlndXJhdGlvbiBmaWxlIGluIEpTT04gZm9ybWF0IGZvciBhcHAgY29uZmlndXJhdGlvbiBwdXJwb3Nlcy5cbiAqXG4gKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSB0byBsb2FkIHRoZSBjb25maWd1cmF0aW9uIGZpbGUgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWQocGF0aDogc3RyaW5nKTogQXBwIHtcbiAgbGV0IGpzb246IHVua25vd25cbiAgdHJ5IHtcbiAgICBqc29uID0gZ2V0SnNvbkZpbGUocGF0aClcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IEVycm9yKGBDb3VsZCBub3QgbG9hZCBjb25maWcgYXQgXCIke3BhdGh9XCIuXFxuXFxuJHtlfWApXG4gIH1cbiAgYXNzZXJ0QXBwQ29uZmlnKGpzb24pXG5cbiAgcmV0dXJuIGpzb25cbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXBwQ29uZmlnKGpzb246IHVua25vd24pOiBhc3NlcnRzIGpzb24gaXMgQXBwIHtcbiAgZnVuY3Rpb24gYXNzZXJ0U3RyKHZhbDogdW5rbm93biwgcHJvcDogc3RyaW5nKTogYXNzZXJ0cyB2YWwgaXMgc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgdmFsdWUgb2YgY29uZmlnLiR7cHJvcH0gdG8gYmUgYSBzdHJpbmdcXG5Hb3Q6ICR7dmFsfWAsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0RGlyKHZhbDogdW5rbm93biwgcHJvcDogc3RyaW5nKTogYXNzZXJ0cyB2YWwgaXMgc3RyaW5nIHtcbiAgICBhc3NlcnRTdHIodmFsLCBwcm9wKVxuICAgIGlmICghdGVzdCgnLWQnLCB2YWwpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIGNvbmZpZy4ke3Byb3B9IHRvIGJlIGEgZGlyZWN0b3J5XFxuR290OiAke3ZhbH1gLFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydEJvb2wodmFsOiB1bmtub3duLCBwcm9wOiBzdHJpbmcpOiBhc3NlcnRzIHZhbCBpcyBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIGNvbmZpZy4ke3Byb3B9IHRvIGJlIGEgYm9vbGVhblxcbkdvdDogJHt2YWx9YCxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRDb21waWxlclNldHRpbmdzKFxuICAgIHZhbDogdW5rbm93bixcbiAgKTogYXNzZXJ0cyB2YWwgaXMgQXBwWydjb21waWxlclNldHRpbmdzJ10ge1xuICAgIGlmICghdmFsIHx8IHR5cGVvZiB2YWwgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIHZhbHVlIG9mIGNvbmZpZy5jb21waWxlclNldHRpbmdzIHRvIGJlIGFuIG9iamVjdFxcbkdvdDoke3ZhbH1gLFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBpbGVyU2V0dGluZ3MgPSB2YWwgYXMgRGVlcFVua25vd248QXBwWydjb21waWxlclNldHRpbmdzJ10+XG4gICAgaWYgKFxuICAgICAgIWNvbXBpbGVyU2V0dGluZ3MudmVyc2lvbnMgfHxcbiAgICAgIHR5cGVvZiBjb21waWxlclNldHRpbmdzLnZlcnNpb25zICE9PSAnb2JqZWN0J1xuICAgICkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBFeHBlY3RlZCB2YWx1ZSBvZiBjb25maWcuY29tcGlsZXJTZXR0aW5ncy52ZXJzaW9ucyB0byBiZSBhIGRpY3Rpb25hcnlcXG5Hb3Q6JHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBjb21waWxlclNldHRpbmdzLnZlcnNpb25zLFxuICAgICAgICApfWAsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYXBwQ29uZmlnID0ganNvbiBhcyBEZWVwVW5rbm93bjxBcHA+XG4gIGFzc2VydERpcihhcHBDb25maWcuY29udHJhY3RzRGlyLCAnY29udHJhY3RzRGlyJylcbiAgYXNzZXJ0U3RyKGFwcENvbmZpZy5hcnRpZmFjdHNEaXIsICdhcnRpZmFjdHNEaXInKVxuICBhc3NlcnRTdHIoYXBwQ29uZmlnLmNvbnRyYWN0QWJzdHJhY3Rpb25EaXIsICdjb250cmFjdEFic3RyYWN0aW9uRGlyJylcbiAgYXNzZXJ0Qm9vbChhcHBDb25maWcudXNlRG9ja2VyaXNlZFNvbGMsICd1c2VEb2NrZXJpc2VkU29sYycpXG4gIGFzc2VydENvbXBpbGVyU2V0dGluZ3MoYXBwQ29uZmlnLmNvbXBpbGVyU2V0dGluZ3MpXG59XG4iXX0=