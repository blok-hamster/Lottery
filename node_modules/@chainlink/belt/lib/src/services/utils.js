"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsonFile = exports.debug = exports.getArtifactDirs = exports.getContractDirs = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = require("fs");
const shelljs_1 = require("shelljs");
/**
 * Get contract versions and their directories
 */
function getContractDirs(conf) {
    const contractDirs = shelljs_1.ls(conf.contractsDir);
    return contractDirs
        .map((d) => ({
        dir: d,
        version: conf.compilerSettings.versions[d],
    }))
        .filter((p) => !!p.version);
}
exports.getContractDirs = getContractDirs;
/**
 * Get artifact verions and their directories
 */
function getArtifactDirs(conf) {
    const artifactDirs = shelljs_1.ls(conf.artifactsDir);
    return artifactDirs
        .map((d) => ({
        dir: d,
        version: conf.compilerSettings.versions[d],
    }))
        .filter((p) => !!p.version);
}
exports.getArtifactDirs = getArtifactDirs;
/**
 * Create a logger specifically for debugging. The root level namespace is based on the package name.
 *
 * @see https://www.npmjs.com/package/debug
 * @param fileName The filename that the debug logger is being used in for namespacing purposes.
 */
function debug(fileName) {
    return debug_1.default('belt').extend(fileName);
}
exports.debug = debug;
/**
 * Load a json file at the specified path.
 *
 * @param path The file path relative to the cwd to read in the json file from.
 */
function getJsonFile(path) {
    return JSON.parse(fs_1.readFileSync(path, 'utf8'));
}
exports.getJsonFile = getJsonFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDBEQUFxQjtBQUNyQiwyQkFBaUM7QUFDakMscUNBQTRCO0FBRzVCOztHQUVHO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLElBQWdCO0lBQzlDLE1BQU0sWUFBWSxHQUFHLFlBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFFMUMsT0FBTyxZQUFZO1NBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNYLEdBQUcsRUFBRSxDQUFDO1FBQ04sT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQzNDLENBQUMsQ0FBQztTQUNGLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUMvQixDQUFDO0FBVEQsMENBU0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxJQUFnQjtJQUM5QyxNQUFNLFlBQVksR0FBRyxZQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRTFDLE9BQU8sWUFBWTtTQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDWCxHQUFHLEVBQUUsQ0FBQztRQUNOLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUMzQyxDQUFDLENBQUM7U0FDRixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDL0IsQ0FBQztBQVRELDBDQVNDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixLQUFLLENBQUMsUUFBZ0I7SUFDcEMsT0FBTyxlQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ25DLENBQUM7QUFGRCxzQkFFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixXQUFXLENBQUMsSUFBWTtJQUN0QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBRkQsa0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZCBmcm9tICdkZWJ1ZydcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgbHMgfSBmcm9tICdzaGVsbGpzJ1xuaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy4vY29uZmlnJ1xuXG4vKipcbiAqIEdldCBjb250cmFjdCB2ZXJzaW9ucyBhbmQgdGhlaXIgZGlyZWN0b3JpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYWN0RGlycyhjb25mOiBjb25maWcuQXBwKSB7XG4gIGNvbnN0IGNvbnRyYWN0RGlycyA9IGxzKGNvbmYuY29udHJhY3RzRGlyKVxuXG4gIHJldHVybiBjb250cmFjdERpcnNcbiAgICAubWFwKChkKSA9PiAoe1xuICAgICAgZGlyOiBkLFxuICAgICAgdmVyc2lvbjogY29uZi5jb21waWxlclNldHRpbmdzLnZlcnNpb25zW2RdLFxuICAgIH0pKVxuICAgIC5maWx0ZXIoKHApID0+ICEhcC52ZXJzaW9uKVxufVxuXG4vKipcbiAqIEdldCBhcnRpZmFjdCB2ZXJpb25zIGFuZCB0aGVpciBkaXJlY3Rvcmllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJ0aWZhY3REaXJzKGNvbmY6IGNvbmZpZy5BcHApIHtcbiAgY29uc3QgYXJ0aWZhY3REaXJzID0gbHMoY29uZi5hcnRpZmFjdHNEaXIpXG5cbiAgcmV0dXJuIGFydGlmYWN0RGlyc1xuICAgIC5tYXAoKGQpID0+ICh7XG4gICAgICBkaXI6IGQsXG4gICAgICB2ZXJzaW9uOiBjb25mLmNvbXBpbGVyU2V0dGluZ3MudmVyc2lvbnNbZF0sXG4gICAgfSkpXG4gICAgLmZpbHRlcigocCkgPT4gISFwLnZlcnNpb24pXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbG9nZ2VyIHNwZWNpZmljYWxseSBmb3IgZGVidWdnaW5nLiBUaGUgcm9vdCBsZXZlbCBuYW1lc3BhY2UgaXMgYmFzZWQgb24gdGhlIHBhY2thZ2UgbmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2RlYnVnXG4gKiBAcGFyYW0gZmlsZU5hbWUgVGhlIGZpbGVuYW1lIHRoYXQgdGhlIGRlYnVnIGxvZ2dlciBpcyBiZWluZyB1c2VkIGluIGZvciBuYW1lc3BhY2luZyBwdXJwb3Nlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGQoJ2JlbHQnKS5leHRlbmQoZmlsZU5hbWUpXG59XG5cbi8qKlxuICogTG9hZCBhIGpzb24gZmlsZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXG4gKlxuICogQHBhcmFtIHBhdGggVGhlIGZpbGUgcGF0aCByZWxhdGl2ZSB0byB0aGUgY3dkIHRvIHJlYWQgaW4gdGhlIGpzb24gZmlsZSBmcm9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SnNvbkZpbGUocGF0aDogc3RyaW5nKTogdW5rbm93biB7XG4gIHJldHVybiBKU09OLnBhcnNlKHJlYWRGaWxlU3luYyhwYXRoLCAndXRmOCcpKVxufVxuIl19