"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolidityFiles = exports.getPackageJson = exports.getJavascriptFiles = exports.getTruffleConfig = exports.getSolidityVersions = exports.getSolidityVersionBy = exports.modifyTruffleBoxWith = void 0;
const path_1 = require("path");
const shelljs_1 = require("shelljs");
/**
 * Modify a truffle box with the given solidity version
 *
 * @param solidityVersion A tuple of alias and version of a solidity version, e.g ['v0.4', '0.4.24']
 * @param path The path to the truffle box
 * @param dryRun Whether to actually modify the files in-place or to print the modified files to stdout
 */
function modifyTruffleBoxWith([solcVersionAlias, solcVersion], path, dryRun) {
    const solVersionToOzversion = {
        '0.5.0': '2.3.0',
        '0.4.24': '2.0.0',
    };
    const ozVersion = solVersionToOzversion[solcVersion];
    convertPackageJson(path, ozVersion, solVersionToOzversion, solcVersion, dryRun);
    convertTruffleConfig(path, solcVersion, dryRun);
    convertSolidityFiles(path, ozVersion, dryRun, solcVersionAlias, solcVersion);
    convertJavascriptFiles(path, solcVersionAlias, dryRun);
}
exports.modifyTruffleBoxWith = modifyTruffleBoxWith;
/**
 * Get a solidity version by its alias or version number
 *
 * @param versionAliasOrVersion Either a solidity version alias "v0.6" | "0.6" or its full version "0.6.2"
 * @throws error if version given could not be found
 */
function getSolidityVersionBy(versionAliasOrVersion) {
    const versions = getSolidityVersions();
    const version = versions.find(([alias, full]) => alias.replace('v', '') === versionAliasOrVersion.replace('v', '') ||
        full === versionAliasOrVersion);
    if (!version) {
        throw Error(`Could not find given version, here are the available versions: ${versions}`);
    }
    return version;
}
exports.getSolidityVersionBy = getSolidityVersionBy;
/**
 * Get a list of available solidity versions based on what's published in @chainlink/contracts
 *
 * The returned format is [alias, version] where alias can be "v0.6" | "0.6" and full version can be "0.6.2"
 */
function getSolidityVersions() {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const config = require('@chainlink/contracts/app.config.json');
    return Object.entries(config.compilerSettings.versions).filter(([, v]) => config.publicVersions.find((pv) => pv === v));
}
exports.getSolidityVersions = getSolidityVersions;
/**
 * Get the path to the truffle config
 *
 * @param basePath The path to the truffle box
 */
function getTruffleConfig(basePath) {
    return path_1.join(basePath, 'truffle-config.js');
}
exports.getTruffleConfig = getTruffleConfig;
/**
 * Get a list of all javascript files in the truffle box
 *
 * @param basePath The path to the truffle box
 */
function getJavascriptFiles(basePath) {
    const directories = ['scripts', 'test', 'migrations'];
    return directories
        .map((d) => shelljs_1.ls(path_1.join(basePath, d, '**', '*.js')))
        .reduce((prev, next) => {
        return prev.concat(next);
    }, []);
}
exports.getJavascriptFiles = getJavascriptFiles;
/**
 * Get path to the package.json
 *
 * @param basePath The path to the truffle box
 */
function getPackageJson(basePath) {
    return path_1.join(basePath, 'package.json');
}
exports.getPackageJson = getPackageJson;
/**
 * Get a list of all solidity files in the truffle box
 *
 * @param basePath The path to the truffle box
 */
function getSolidityFiles(basePath) {
    return [...shelljs_1.ls(path_1.join(basePath, 'contracts', '**', '*.sol'))];
}
exports.getSolidityFiles = getSolidityFiles;
function convertPackageJson(path, ozVersion, solVersionToOzversion, solcVersion, dryRun) {
    const packageJson = getPackageJson(path);
    if (ozVersion !== '2.0.0') {
        replaceInFile(`"openzeppelin-solidity": "1.12.0"`, `"@openzeppelin/contracts": "${solVersionToOzversion[solcVersion]}"`, [packageJson], dryRun);
    }
}
function convertTruffleConfig(path, solcVersion, dryRun) {
    const truffleConfig = getTruffleConfig(path);
    replaceInFile("version: '0.4.24'", `version: '${solcVersion}'`, [truffleConfig], dryRun);
}
function convertSolidityFiles(path, ozVersion, dryRun, solcVersionAlias, solcVersion) {
    const solFiles = getSolidityFiles(path);
    if (ozVersion !== '2.0.0') {
        replaceInFile('import "openzeppelin-solidity', `import "@openzeppelin`, solFiles, dryRun);
    }
    replaceInFile('@chainlink/contracts/src/v0.4', `@chainlink/contracts/src/${solcVersionAlias}`, solFiles, dryRun);
    replaceInFile('pragma solidity 0.4.24;', `pragma solidity ${solcVersion};`, solFiles, dryRun);
}
function convertJavascriptFiles(path, solcVersionAlias, dryRun) {
    const jsFiles = getJavascriptFiles(path);
    replaceInFile('@chainlink/contracts/truffle/v0.4', `@chainlink/contracts/truffle/${solcVersionAlias}`, jsFiles, dryRun);
    // replace linktoken back to v0.4
    replaceInFile(`@chainlink/contracts/truffle/${solcVersionAlias}/LinkToken`, '@chainlink/contracts/truffle/v0.4/LinkToken', jsFiles, dryRun);
}
function replaceInFile(regex, replacement, files, dryRun) {
    if (dryRun) {
        const { stderr, stdout } = shelljs_1.sed(regex, replacement, files);
        if (stdout) {
            console.log(stdout);
        }
        if (stderr) {
            console.error(stderr);
        }
    }
    else {
        shelljs_1.sed('-i', regex, replacement, files);
    }
}
//# sourceMappingURL=data:application/json;base64,