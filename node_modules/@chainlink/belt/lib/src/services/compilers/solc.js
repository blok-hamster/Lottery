"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompilerOptions = exports.compileAll = void 0;
const sol_compiler_1 = require("@0x/sol-compiler");
const path_1 = require("path");
const utils_1 = require("../utils");
const d = utils_1.debug('solc');
/**
 * Generate solidity artifacts for all of the solidity versions under a specified contract
 * directory.
 *
 * @param conf The application configuration, e.g. where to read solidity files, where to output, etc..
 */
async function compileAll(conf) {
    return Promise.all(utils_1.getContractDirs(conf).map(async ({ dir, version }) => {
        const opts = getCompilerOptions(conf, dir, version);
        const c = new sol_compiler_1.Compiler(opts);
        // Compiler#getCompilerOutputsAsync throws on compilation errors
        // this method prints any errors and warnings for us
        await c.compileAsync();
    }));
}
exports.compileAll = compileAll;
/**
 * Create options for sol-compiler instance that reads in a subdirectory of smart contracts e.g. (src/v0.4, src/v0.5, ..)
 * and outputs their respective compiler artifacts e.g. (abi/v0.4, abi/v0.5)
 *
 * @param config The application specific configuration to use for sol-compiler
 * @param subDir The subdirectory to use as a namespace when reading .sol files and outputting
 * their respective artifacts
 * @param solcVersion The solidity compiler version to use with sol-compiler
 */
function getCompilerOptions({ artifactsDir, useDockerisedSolc, contractsDir, compilerSettings, }, subDir, solcVersion) {
    const _d = d.extend('compiler');
    // remove our custom versions property
    const compilerSettingCopy = JSON.parse(JSON.stringify(compilerSettings));
    // @ts-expect-error
    delete compilerSettingCopy.versions;
    const options = {
        artifactsDir: path_1.join(artifactsDir, subDir),
        compilerSettings: {
            outputSelection: {
                '*': {
                    '*': [
                        'abi',
                        'devdoc',
                        'userdoc',
                        'evm.bytecode.object',
                        'evm.bytecode.sourceMap',
                        'evm.deployedBytecode.object',
                        'evm.deployedBytecode.sourceMap',
                        'evm.methodIdentifiers',
                        'metadata',
                    ],
                },
            },
            ...compilerSettingCopy,
        },
        contracts: '*',
        contractsDir: path_1.join(contractsDir, subDir),
        isOfflineMode: false,
        shouldSaveStandardInput: false,
        solcVersion,
        useDockerisedSolc,
    };
    _d('Compiler options: %o', options);
    return options;
}
exports.getCompilerOptions = getCompilerOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb21waWxlcnMvc29sYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBNEQ7QUFDNUQsK0JBQTJCO0FBRTNCLG9DQUFpRDtBQUNqRCxNQUFNLENBQUMsR0FBRyxhQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFdkI7Ozs7O0dBS0c7QUFDSSxLQUFLLFVBQVUsVUFBVSxDQUFDLElBQWdCO0lBQy9DLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FDaEIsdUJBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNuRCxNQUFNLENBQUMsR0FBRyxJQUFJLHVCQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFNUIsZ0VBQWdFO1FBQ2hFLG9EQUFvRDtRQUNwRCxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUN4QixDQUFDLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQVhELGdDQVdDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FDaEMsRUFDRSxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFlBQVksRUFDWixnQkFBZ0IsR0FDTCxFQUNiLE1BQWMsRUFDZCxXQUFtQjtJQUVuQixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQy9CLHNDQUFzQztJQUN0QyxNQUFNLG1CQUFtQixHQUFtQyxJQUFJLENBQUMsS0FBSyxDQUNwRSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQ2pDLENBQUE7SUFDRCxtQkFBbUI7SUFDbkIsT0FBTyxtQkFBbUIsQ0FBQyxRQUFRLENBQUE7SUFFbkMsTUFBTSxPQUFPLEdBQW9CO1FBQy9CLFlBQVksRUFBRSxXQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUN4QyxnQkFBZ0IsRUFBRTtZQUNoQixlQUFlLEVBQUU7Z0JBQ2YsR0FBRyxFQUFFO29CQUNILEdBQUcsRUFBRTt3QkFDSCxLQUFLO3dCQUNMLFFBQVE7d0JBQ1IsU0FBUzt3QkFDVCxxQkFBcUI7d0JBQ3JCLHdCQUF3Qjt3QkFDeEIsNkJBQTZCO3dCQUM3QixnQ0FBZ0M7d0JBQ2hDLHVCQUF1Qjt3QkFDdkIsVUFBVTtxQkFDWDtpQkFDRjthQUNGO1lBQ0QsR0FBRyxtQkFBbUI7U0FDdkI7UUFDRCxTQUFTLEVBQUUsR0FBRztRQUNkLFlBQVksRUFBRSxXQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztRQUN4QyxhQUFhLEVBQUUsS0FBSztRQUNwQix1QkFBdUIsRUFBRSxLQUFLO1FBQzlCLFdBQVc7UUFDWCxpQkFBaUI7S0FDbEIsQ0FBQTtJQUNELEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUVuQyxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDO0FBaERELGdEQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVyLCBDb21waWxlck9wdGlvbnMgfSBmcm9tICdAMHgvc29sLWNvbXBpbGVyJ1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vY29uZmlnJ1xuaW1wb3J0IHsgZGVidWcsIGdldENvbnRyYWN0RGlycyB9IGZyb20gJy4uL3V0aWxzJ1xuY29uc3QgZCA9IGRlYnVnKCdzb2xjJylcblxuLyoqXG4gKiBHZW5lcmF0ZSBzb2xpZGl0eSBhcnRpZmFjdHMgZm9yIGFsbCBvZiB0aGUgc29saWRpdHkgdmVyc2lvbnMgdW5kZXIgYSBzcGVjaWZpZWQgY29udHJhY3RcbiAqIGRpcmVjdG9yeS5cbiAqXG4gKiBAcGFyYW0gY29uZiBUaGUgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbiwgZS5nLiB3aGVyZSB0byByZWFkIHNvbGlkaXR5IGZpbGVzLCB3aGVyZSB0byBvdXRwdXQsIGV0Yy4uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21waWxlQWxsKGNvbmY6IGNvbmZpZy5BcHApIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIGdldENvbnRyYWN0RGlycyhjb25mKS5tYXAoYXN5bmMgKHsgZGlyLCB2ZXJzaW9uIH0pID0+IHtcbiAgICAgIGNvbnN0IG9wdHMgPSBnZXRDb21waWxlck9wdGlvbnMoY29uZiwgZGlyLCB2ZXJzaW9uKVxuICAgICAgY29uc3QgYyA9IG5ldyBDb21waWxlcihvcHRzKVxuXG4gICAgICAvLyBDb21waWxlciNnZXRDb21waWxlck91dHB1dHNBc3luYyB0aHJvd3Mgb24gY29tcGlsYXRpb24gZXJyb3JzXG4gICAgICAvLyB0aGlzIG1ldGhvZCBwcmludHMgYW55IGVycm9ycyBhbmQgd2FybmluZ3MgZm9yIHVzXG4gICAgICBhd2FpdCBjLmNvbXBpbGVBc3luYygpXG4gICAgfSksXG4gIClcbn1cblxuLyoqXG4gKiBDcmVhdGUgb3B0aW9ucyBmb3Igc29sLWNvbXBpbGVyIGluc3RhbmNlIHRoYXQgcmVhZHMgaW4gYSBzdWJkaXJlY3Rvcnkgb2Ygc21hcnQgY29udHJhY3RzIGUuZy4gKHNyYy92MC40LCBzcmMvdjAuNSwgLi4pXG4gKiBhbmQgb3V0cHV0cyB0aGVpciByZXNwZWN0aXZlIGNvbXBpbGVyIGFydGlmYWN0cyBlLmcuIChhYmkvdjAuNCwgYWJpL3YwLjUpXG4gKlxuICogQHBhcmFtIGNvbmZpZyBUaGUgYXBwbGljYXRpb24gc3BlY2lmaWMgY29uZmlndXJhdGlvbiB0byB1c2UgZm9yIHNvbC1jb21waWxlclxuICogQHBhcmFtIHN1YkRpciBUaGUgc3ViZGlyZWN0b3J5IHRvIHVzZSBhcyBhIG5hbWVzcGFjZSB3aGVuIHJlYWRpbmcgLnNvbCBmaWxlcyBhbmQgb3V0cHV0dGluZ1xuICogdGhlaXIgcmVzcGVjdGl2ZSBhcnRpZmFjdHNcbiAqIEBwYXJhbSBzb2xjVmVyc2lvbiBUaGUgc29saWRpdHkgY29tcGlsZXIgdmVyc2lvbiB0byB1c2Ugd2l0aCBzb2wtY29tcGlsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBpbGVyT3B0aW9ucyhcbiAge1xuICAgIGFydGlmYWN0c0RpcixcbiAgICB1c2VEb2NrZXJpc2VkU29sYyxcbiAgICBjb250cmFjdHNEaXIsXG4gICAgY29tcGlsZXJTZXR0aW5ncyxcbiAgfTogY29uZmlnLkFwcCxcbiAgc3ViRGlyOiBzdHJpbmcsXG4gIHNvbGNWZXJzaW9uOiBzdHJpbmcsXG4pIHtcbiAgY29uc3QgX2QgPSBkLmV4dGVuZCgnY29tcGlsZXInKVxuICAvLyByZW1vdmUgb3VyIGN1c3RvbSB2ZXJzaW9ucyBwcm9wZXJ0eVxuICBjb25zdCBjb21waWxlclNldHRpbmdDb3B5OiBjb25maWcuQXBwWydjb21waWxlclNldHRpbmdzJ10gPSBKU09OLnBhcnNlKFxuICAgIEpTT04uc3RyaW5naWZ5KGNvbXBpbGVyU2V0dGluZ3MpLFxuICApXG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgZGVsZXRlIGNvbXBpbGVyU2V0dGluZ0NvcHkudmVyc2lvbnNcblxuICBjb25zdCBvcHRpb25zOiBDb21waWxlck9wdGlvbnMgPSB7XG4gICAgYXJ0aWZhY3RzRGlyOiBqb2luKGFydGlmYWN0c0Rpciwgc3ViRGlyKSxcbiAgICBjb21waWxlclNldHRpbmdzOiB7XG4gICAgICBvdXRwdXRTZWxlY3Rpb246IHtcbiAgICAgICAgJyonOiB7XG4gICAgICAgICAgJyonOiBbXG4gICAgICAgICAgICAnYWJpJyxcbiAgICAgICAgICAgICdkZXZkb2MnLFxuICAgICAgICAgICAgJ3VzZXJkb2MnLFxuICAgICAgICAgICAgJ2V2bS5ieXRlY29kZS5vYmplY3QnLFxuICAgICAgICAgICAgJ2V2bS5ieXRlY29kZS5zb3VyY2VNYXAnLFxuICAgICAgICAgICAgJ2V2bS5kZXBsb3llZEJ5dGVjb2RlLm9iamVjdCcsXG4gICAgICAgICAgICAnZXZtLmRlcGxveWVkQnl0ZWNvZGUuc291cmNlTWFwJyxcbiAgICAgICAgICAgICdldm0ubWV0aG9kSWRlbnRpZmllcnMnLFxuICAgICAgICAgICAgJ21ldGFkYXRhJyxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIC4uLmNvbXBpbGVyU2V0dGluZ0NvcHksXG4gICAgfSxcbiAgICBjb250cmFjdHM6ICcqJyxcbiAgICBjb250cmFjdHNEaXI6IGpvaW4oY29udHJhY3RzRGlyLCBzdWJEaXIpLFxuICAgIGlzT2ZmbGluZU1vZGU6IGZhbHNlLFxuICAgIHNob3VsZFNhdmVTdGFuZGFyZElucHV0OiBmYWxzZSxcbiAgICBzb2xjVmVyc2lvbixcbiAgICB1c2VEb2NrZXJpc2VkU29sYyxcbiAgfVxuICBfZCgnQ29tcGlsZXIgb3B0aW9uczogJW8nLCBvcHRpb25zKVxuXG4gIHJldHVybiBvcHRpb25zXG59XG4iXX0=